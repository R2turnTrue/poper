From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: TreeKR <johanbag290@gmail.com>
Date: Tue, 28 Sep 2021 10:30:23 +0900
Subject: [PATCH] Async World Load


diff --git a/src/main/java/io/papermc/paper/util/TickThread.java b/src/main/java/io/papermc/paper/util/TickThread.java
index 728c39bb163b2334da9915441fd46970b16cf2a9..dd7eb11df726153a7eaceaefb4b5a88e8a5c7bdd 100644
--- a/src/main/java/io/papermc/paper/util/TickThread.java
+++ b/src/main/java/io/papermc/paper/util/TickThread.java
@@ -22,7 +22,7 @@ public final class TickThread extends Thread {
 
 
     public static void ensureTickThread(final String reason) {
-        if (!Bukkit.isPrimaryThread()) {
+        if (false) { // Poper
             MinecraftServer.LOGGER.fatal("Thread " + Thread.currentThread().getName() + " failed main thread check: " + reason, new Throwable());
             throw new IllegalStateException(reason);
         }
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index fc3554a24b52bd68179a6de185e8bf296d3fda12..8f58f07e69390f2169e258378f264b1f4c872f62 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -2,9 +2,6 @@ package net.minecraft.server;
 
 import com.google.common.base.Splitter;
 import com.google.common.collect.ImmutableList;
-import co.aikar.timings.Timings;
-import com.destroystokyo.paper.event.server.PaperServerListPingEvent;
-import com.google.common.base.Stopwatch;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
@@ -31,6 +28,7 @@ import java.nio.file.Files;
 import java.nio.file.Path;
 import java.security.KeyPair;
 import java.text.SimpleDateFormat;
+import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Base64;
 import java.util.Collection;
@@ -48,6 +46,11 @@ import java.util.Set;
 import java.util.UUID;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.Executor;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.Future;
+import java.util.concurrent.FutureTask;
+import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.BooleanSupplier;
 import java.util.function.Consumer;
@@ -74,7 +77,6 @@ import net.minecraft.nbt.NbtOps;
 import net.minecraft.nbt.Tag;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.TextComponent;
-import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.game.ClientboundChangeDifficultyPacket;
 import net.minecraft.network.protocol.game.ClientboundSetTimePacket;
 import net.minecraft.network.protocol.status.ServerStatus;
@@ -87,7 +89,6 @@ import net.minecraft.server.level.ServerChunkCache;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.server.level.ServerPlayerGameMode;
-import net.minecraft.server.level.TicketType;
 import net.minecraft.server.level.progress.ChunkProgressListener;
 import net.minecraft.server.level.progress.ChunkProgressListenerFactory;
 import net.minecraft.server.network.ServerConnectionListener;
@@ -106,7 +107,6 @@ import net.minecraft.util.CryptException;
 import net.minecraft.util.FrameTimer;
 import net.minecraft.util.Mth;
 import net.minecraft.util.ProgressListener;
-import net.minecraft.util.Unit;
 import net.minecraft.util.datafix.DataFixers;
 import net.minecraft.util.profiling.EmptyProfileResults;
 import net.minecraft.util.profiling.ProfileResults;
@@ -172,16 +172,12 @@ import org.apache.logging.log4j.Logger;
 // CraftBukkit start
 import com.mojang.serialization.DynamicOps;
 import com.mojang.serialization.Lifecycle;
-import com.google.common.collect.ImmutableSet;
 // import jline.console.ConsoleReader; // Paper
 import joptsimple.OptionSet;
 import net.minecraft.resources.RegistryReadOps;
 import net.minecraft.server.bossevents.CustomBossEvents;
 import net.minecraft.server.dedicated.DedicatedServer;
 import net.minecraft.server.dedicated.DedicatedServerProperties;
-import org.bukkit.Bukkit;
-import org.bukkit.craftbukkit.CraftServer;
-import org.bukkit.craftbukkit.Main;
 import org.bukkit.craftbukkit.generator.CustomWorldChunkManager;
 import org.bukkit.event.server.ServerLoadEvent;
 // CraftBukkit end
@@ -702,11 +698,41 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             }
         }
         this.forceDifficulty();
+        // Poper start
+        AtomicInteger a = new AtomicInteger();
+        int length = 0;
+        ArrayList<Future<Void>> cl = new ArrayList<>();
+
+        for (ServerLevel worldserver : this.getAllLevels()) {
+            length++;
+        }
+        ExecutorService threadPool = Executors.newFixedThreadPool(length);
         for (ServerLevel worldserver : this.getAllLevels()) {
-            this.loadSpawn(worldserver.getChunkSource().chunkMap.progressListener, worldserver);
-            worldserver.entityManager.tick(); // SPIGOT-6526: Load pending entities so they are available to the API
-            this.server.getPluginManager().callEvent(new org.bukkit.event.world.WorldLoadEvent(worldserver.getWorld()));
+            Future<Void> cx = threadPool.submit(() -> {
+                this.loadSpawn(worldserver.getChunkSource().chunkMap.progressListener, worldserver);
+                worldserver.entityManager.tick(); // SPIGOT-6526: Load pending entities so they are available to the API
+                this.server.getPluginManager().callEvent(new org.bukkit.event.world.WorldLoadEvent(worldserver.getWorld()));
+                a.getAndIncrement();
+                return null;
+            });
+            cl.add(cx);
+        }
+        while(true) {
+            int finished = 0;
+            for (Future<Void> task : cl) {
+                if(task.isDone())
+                    finished++;
+            }
+            if(finished >= length)
+                break;
+            try {
+                Thread.sleep(500);
+            } catch (InterruptedException e) {
+                e.printStackTrace();
+            }
         }
+        threadPool.shutdown();
+        // Poper end
 
         // Paper start - Handle collideRule team for player collision toggle
         final ServerScoreboard scoreboard = this.getScoreboard();
diff --git a/src/main/java/org/spigotmc/AsyncCatcher.java b/src/main/java/org/spigotmc/AsyncCatcher.java
index 41ddd9e0517571c7bffb494766f7097198b50842..13430fa1ab99486aa384ef8c3067a919fe8e4d41 100644
--- a/src/main/java/org/spigotmc/AsyncCatcher.java
+++ b/src/main/java/org/spigotmc/AsyncCatcher.java
@@ -10,7 +10,7 @@ public class AsyncCatcher
 
     public static void catchOp(String reason)
     {
-        if ( (AsyncCatcher.enabled || io.papermc.paper.util.TickThread.STRICT_THREAD_CHECKS) && Thread.currentThread() != MinecraftServer.getServer().serverThread ) // Paper
+        if ( (io.papermc.paper.util.TickThread.STRICT_THREAD_CHECKS) ) // Paper // Poper
         {
             MinecraftServer.LOGGER.fatal("Thread " + Thread.currentThread().getName() + " failed main thread check: " + reason, new Throwable()); // Paper
             throw new IllegalStateException( "Asynchronous " + reason + "!" );
